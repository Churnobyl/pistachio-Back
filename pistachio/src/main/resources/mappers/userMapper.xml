<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.pistachio.model.dao.UserDao">
    <!-- 유저 회원가입 -->
    <insert id="createUser" parameterType="addUserRequest" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user
        (email, password, name)
        VALUES
        (#{email}, #{password}, #{name})
    </insert>

    <!-- 유저 이름 중복 확인 -->
    <select id="nameDuplicate" parameterType="string">
        SELECT count(id) FROM user
        WHERE name = #{username}
    </select>

    <!-- 유저 이메일 중복 확인 -->
    <select id="emailDuplicate" parameterType="string">
        SELECT count(id) FROM user
        WHERE email = #{email}
    </select>

    <!-- 유저 검색 -->
    <select id="searchUsers" parameterType="searchCondition" resultType="user">
        SELECT * FROM user a
        INNER JOIN membership b
        ON a.membership_id = b.id
        WHERE
        <trim prefixOverrides="AND">
            <if test="name != null">
                AND a.name LIKE concat('%', #{nickname}, '%')
            </if>
            <if test="membership != null">
                AND b.name concat('%', #{membership}, '%')
            </if>
        </trim>
    </select>

    <!--  유저 로그인  -->
    <select id="loginUser" parameterType="userLoginRequest">
        SELECT * FROM user
        WHERE email = #{email}, password = #{password}
    </select>

    <!--  유저 상세 조회  -->
    <select id="getUserByName" parameterType="string">
        SELECT * FROM user
        WHERE name = #{name}
    </select>

<!--    유저 번호 조회-->
    <select id="getUserById" parameterType="long">
        SELECT * FROM user
        WHERE id = #{id}
    </select>

    <select id="getUserByIdForResponse" parameterType="long">
        SELECT
        u.id as userId,
        u.membership_id as membershipId,
        ms.name as membershipName,
        ms.agency_profile_url as membershipProfileUrl,
        u.email,
        u.name,
        u.user_profile as userProfile,
        u.pista as pista,
        u.is_admin as isAdmin,
        ur.role_id as userType,
        af.project_id as affiliatedProjectId,
        dp.name as affiliatedProjectName
        FROM user u
        LEFT JOIN user_role ur
        ON u.id = ur.user_id
        LEFT JOIN membership ms
        ON u.membership_id = ms.id
        LEFT JOIN affiliated af
        ON u.id = af.donated_user_id
        LEFT JOIN donate_project dp
        ON af.project_id = dp.id
        WHERE u.id = #{id}
    </select>

    <!-- 이메일로 유저 조회 -->
    <select id="getUserByEmail" parameterType="string">
        SELECT
        id,
        membership_id AS membershipId,
        email,
        password,
        name,
        pista,
        user_profile AS userProfile,
        is_admin AS isAdmin,
        is_activate AS isActivate
        FROM user
        WHERE email = #{email}
    </select>

    <!--  유저 수정  -->
    <update id="updateUser" parameterType="user">
        UPDATE user
        <set>
            <trim suffixOverrides=",">
                <if test="password != null">
                    password = #{password},
                </if>
                <if test="name != null">
                    name = #{name},
                </if>
                <if test="userProfile != null">
                    user_profile = #{userProfile},
                </if>
            </trim>
        </set>
        WHERE id = #{id}
    </update>

    <!-- 유저 소속 단체 수정 -->
    <update id="updateUserMembership" parameterType="map">
        UPDATE user
        SET membership_id = #{membershipId}
        WHERE id = #{userId}
    </update>

    <!--  유저 탈퇴  -->
    <update id="inactivateUser" parameterType="user">
        UPDATE user
        <set>
            is_activate = false
        </set>
        WHERE id = #{id} AND email = #{email}
    </update>

    <select id="findRolesByUserId" parameterType="long" resultType="string">
        SELECT r.name FROM role r
        INNER JOIN user_role ur ON r.id = ur.role_id
        WHERE ur.user_id = #{userId}
    </select>

    <insert id="addFollow" parameterType="map">
        INSERT INTO follow
        (following_id, follower_id)
        VALUES
        (#{followingUserId}, #{followerUserId})
    </insert>

    <insert id="deleteFollow" parameterType="map">
        DELETE FROM follow
        WHERE following_id = #{followingUserId} AND follower_id = #{followerUserId}
    </insert>

    <update id="addFollowingCount" parameterType="long">
        UPDATE user
        SET following_count = following_count + 1
        WHERE id = #{userId}
    </update>

    <update id="subFollowingCount" parameterType="long">
        UPDATE user
        SET following_count = following_count - 1
        WHERE id = #{userId}
    </update>

    <update id="addFollowerCount" parameterType="long">
        UPDATE user
        SET follower_count = follower_count + 1
        WHERE id = #{userId}
    </update>

    <update id="subFollowerCount" parameterType="long">
        UPDATE user
        SET follower_count = follower_count - 1
        WHERE id = #{userId}
    </update>

    <insert id="setRole" parameterType="map">
        INSERT INTO user_role (user_id, role_id)
        VALUES (#{userId}, #{roleId})
        ON DUPLICATE KEY UPDATE
        role_id = VALUES(role_id)
    </insert>

    <select id="getRole" parameterType="long">
        SELECT role_id
        FROM user_role
        WHERE user_id = #{userId}
    </select>
</mapper>