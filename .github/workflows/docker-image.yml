name: Docker Image CI

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

permissions:
  contents: read

jobs:
  build-docker-image:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # 1. Java 17 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Create application-SECRET.properties
      run: |
        echo "${{ secrets.APPLICATION_SECRET_PROPERTIES }}" > ./pistachio/src/main/resources/application-SECRET.properties

    - name: Set up Docker Compose
      run: |
        docker-compose -f ./pistachio/docker-compose.yml up -d
        docker-compose -f ./pistachio/docker-compose.yml ps

    - name: Wait for MySQL to be ready
      run: |
        while ! docker-compose exec mysql mysqladmin ping -h localhost --silent; do
          echo "Waiting for MySQL..."
          sleep 5
        done

    - name: Wait for Redis to be ready
      run: |
        while ! docker-compose exec redis redis-cli ping; do
          echo "Waiting for Redis..."
          sleep 5
        done

    - name: Build with Maven
      run: mvn -X -B package --file ./pistachio/pom.xml
      env:
        SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/testdb
        SPRING_DATASOURCE_USERNAME: testuser
        SPRING_DATASOURCE_PASSWORD: testpassword
        SPRING_REDIS_HOST: localhost
        SPRING_REDIS_PORT: 6379

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: churnobyl/pistachio:latest

    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    needs: build-docker-image
    name: Deploy
    runs-on: [ self-hosted, label-example-be ]
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Docker run
        run: |
            docker ps -q --filter "name=pistachio_backend" | grep -q . && docker stop pistachio_backend && docker rm -fv pistachio_backend
            docker run -d -p 80:80 --name pistachio_backend --restart always churnobyl/pistachio:latest
